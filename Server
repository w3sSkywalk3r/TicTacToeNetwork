#include <iostream>
#include <Winsock2.h>
#include <ws2tcpip.h>
#include <tchar.h>
#include <stdlib.h>
#include <sstream>
#include <string>
using namespace std;

// Initialize global variables
char board[3][3] = { {'1', '2', '3'}, {'4', '5', '6'}, {'7', '8', '9'} };
string choice;
int row, rows[3], col, columns[3], diagonal, anti_diagonal, intchoice;

bool turn = true; // True = X turn, False = O turn

// Display current board for desired player
void display_board(SOCKET desiredPlayer)
{
    char playerXO_and_board[200];
    sprintf_s(playerXO_and_board, "\nPlayer 1 [X]    Player 2 [O]\n  %c  |  %c  |  %c \n-----+-----+-----\n  %c  |  %c  |  %c \n-----+-----+-----\n  %c  |  %c  |  %c \n",
        board[0][0], board[0][1], board[0][2],  // Displays which player is X and which is O
        board[1][0], board[1][1], board[1][2],  // Also displays the initial board
        board[2][0], board[2][1], board[2][2]); // Number 1-9 from board array is printed where %c is in the string

    int byteCount = send(desiredPlayer, playerXO_and_board, 200, 0); // sends the board to client
    if (byteCount == SOCKET_ERROR)
    {
        printf("Server sent error %ld.\n", WSAGetLastError());
        return;
    }
    else
    {
        cout << "board" << playerXO_and_board << endl;
    }
}

// Check if input is an integer
bool isint(string str)
{
    for (int i = 0; i < str.length(); i++)
        // if (!isdigit(str[i]))
        //   return false;
        return true;
}

// Procedure for current player's turn
void player_turn(SOCKET desiredPlayer)
{
    while (true)
    {
        if (turn)
        {
            // Preamble for player one
            char whose_turn[200] = "Player - 1 [X] turn: ";
            int byteCount = send(desiredPlayer, whose_turn, 200, 0);
            if (byteCount == SOCKET_ERROR)
            {
                printf("Server sent error %ld.\n", WSAGetLastError());
                return;
            }
            else
            {
                cout << "turn: " << whose_turn << endl;
            }
        }
        else if (!turn)
        {
            // Preamble for player two
            char whose_turn[200] = "Player - 2 [O] turn: ";
            int byteCount = send(desiredPlayer, whose_turn, 200, 0);
            if (byteCount == SOCKET_ERROR)
            {
                printf("Server sent error %ld.\n", WSAGetLastError());
                return;
            }
            else
            {
                cout << "turn: " << whose_turn << endl;
            }
        }

        // getline(cin, choice); //orinigal code. Prevents multiple turns in one input
        // Reveives the players move. This is in place of the get line
        char buffer[200];
        int choice = recv(desiredPlayer, buffer, 200, 0); // receives where the move is

        // Input validation check
        if (choice < 0)
        {
            printf("Client: error %ld.\n", WSAGetLastError());
            return;
        }
        else
        {
            cout << "Space selected: " << buffer << endl;
        }

        char invalidMove[200] = "Invalid Move\n";
        if (!isint(buffer))
            continue;
        stringstream(buffer) >> intchoice;

        // Assign coordinates based on player choice
        switch (intchoice)
        {
        case 1:
            row = 0;
            col = 0;
            break;
        case 2:
            row = 0;
            col = 1;
            break;
        case 3:
            row = 0;
            col = 2;
            break;
        case 4:
            row = 1;
            col = 0;
            break;
        case 5:
            row = 1;
            col = 1;
            break;
        case 6:
            row = 1;
            col = 2;
            break;
        case 7:
            row = 2;
            col = 0;
            break;
        case 8:
            row = 2;
            col = 1;
            break;
        case 9:
            row = 2;
            col = 2;
            break;
        default:
            int byteCount = send(desiredPlayer, invalidMove, 200, 0); // sends if input is invalid
            continue;
        }

        // Check if space is already used
        if (board[row][col] == 'X' || board[row][col] == 'O')
        {
            cout << "Occupied cell\n";
            char OccupiedCell[200] = "Occupied cell\n";
            int byteCount = send(desiredPlayer, OccupiedCell, 200, 0); // sends if input is occupied

            if (byteCount == SOCKET_ERROR)
            {
                printf("Server sent error %ld.\n", WSAGetLastError());
                return;
            }
            else
            {
                cout << OccupiedCell << endl; // displays if input is occupied
            }
        }
        // Update the space
        else
        {
            int change = turn ? 1 : -1; // Increment or Decrement value for win check
            board[row][col] = turn ? 'X' : 'O';
            rows[row] += change;
            columns[col] += change;
            if (row == col)
                diagonal += change;
            if (row == (2 - col))
                anti_diagonal += change;

            // Switch turns
            turn = !turn;
            return;
        }
    }
}

// Function to check if game has been won
bool gameover()
{
    for (int i = 0; i < 3; i++)
        if (rows[i] > 2 || rows[i] < -2 || columns[i] > 2 || columns[i] < -2 || diagonal > 2 || diagonal < -2 || anti_diagonal > 2 || anti_diagonal < -2)
            return true;
    return false;
}

// Sends initial board to desired Player
void sendBoard(SOCKET desiredPlayer)
{
    char buffer[200] = "Tic-Tac-Toe";
    int byteCount = send(desiredPlayer, buffer, 200, 0); // send name of game

    if (byteCount == SOCKET_ERROR)
    {
        printf("Server sent error %ld.\n", WSAGetLastError());
        exit(1);
    }
    else
    {
        cout << "Name of game: " << buffer << endl; // displays the name of the game
    }

    display_board(desiredPlayer); // displays initial board
}

int main()
{
    // step 1 initialize WSA, load DLL
    SOCKET serverSocket, playerOne, playerTwo;
    int port = 55555; //chosen unused port
    WSADATA wsaData; // includes details on the windows sockets implementation. gets populated from WSAStartup
    int wsaerr;
    WORD wVersionRequested = MAKEWORD(2, 2); //This is just what version of winsock we are using. Version 2.2
    wsaerr = WSAStartup(wVersionRequested, &wsaData); //WSAStartup allows connection to the internet through TCP
    if (wsaerr != 0) //check to see if winsock is running
    {
        cout << "the The Winsock not found!" << endl;
        return 0;
    }
    else
    {
        cout << "The Winsock found!" << endl;
        cout << "The status: " << wsaData.szSystemStatus << endl; //says if running or not
    }

    // step 2 create sockets
    serverSocket = INVALID_SOCKET;
    serverSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP); //creates socket based on the parameters
    //Af_INET says we will choose between TCP or UDP
    //SOCK_STREAM selects TCP
    //IPPROTO_TCP is a constant we need to pass for TCP
    if (serverSocket == INVALID_SOCKET) //checks if the socket was created
    {
        cout << "Error at socket(): " << WSAGetLastError() << endl;
        WSACleanup(); //terminates the use of winsock. Frees up DLL so other applications can use it
        return 0;
    }
    else
    {
        cout << "socket() is OK!" << endl;
    }

    // step 3 bind ip and port number to socket
    sockaddr_in service; //sockaddr_in is used to specify a local or remote endpoint address to connect a socket
    service.sin_family = AF_INET; //As before Af_INET says we will choose between TCP or UDP
    //Change 127.0.0.1 IP to the IP of the server 
    InetPton(AF_INET, _T("127.0.0.1"), &service.sin_addr.s_addr); // 127.0.0.1 is IP to run on single computer
    service.sin_port = htons(port); //IP port. htons makes sure the value is in TCP network byte order

    //for the bind function
    //1st parameter is the socket you want to bind
    //2nd parameter is the IP address
    //3rd parameter is the length of the address
    if (bind(serverSocket, (SOCKADDR*)&service, sizeof(service)) == SOCKET_ERROR)
    {
        cout << "Bind failed: " << WSAGetLastError() << endl;
        closesocket(serverSocket); //close the socket
        WSACleanup(); //terminates the use of winsock
        return 0;
    }
    else
    {
        cout << "Bind is working" << endl;
    }

    // step 4 listen on the socket
    if (listen(serverSocket, 1) == SOCKET_ERROR) //listens for connections
    { // set for 1 client change the 1 to a 2 for 2 clients
        cout << "Listen error" << WSAGetLastError() << endl;
    }
    else
    {
        cout << "Listen is working. Waiting" << endl;
    }

    // step 5 Accept connection
    // pauses excution until Player 1 Connects
    playerOne = accept(serverSocket, NULL, NULL);
    if (playerOne == INVALID_SOCKET)
    {
        cout << "accept faild " << WSAGetLastError() << endl;
        WSACleanup(); //terminates the use of winsock
        return -1;
    }
    cout << "Connection One accepted" << endl;

    // Pauses Execution until Player 2 Connects
    playerTwo = accept(serverSocket, NULL, NULL);
    if (playerOne == INVALID_SOCKET)
    {
        cout << "accept faild " << WSAGetLastError() << endl;
        WSACleanup(); //terminates the use of winsock
        return -1;
    }
    cout << "Connection Two accepted" << endl;

    // step 6 send and receive data
    // Send initial board to both players
    sendBoard(playerOne);
    sendBoard(playerTwo);

    for (auto i = 0; i < 9; i++) // goes through the turns of the game
    {
        // Player One's Turn
        if (turn)
        {
            player_turn(playerOne);
            display_board(playerOne);

            // check if gameover condition is met
            if (gameover())
            {
                // Break Loop
                i = 9;
            }
            else
            {
                // Send updated board to other Player
                display_board(playerTwo);
            }
        }
        // Player Two's Turn
        else
        {
            // Procede with Player Two's turn
            player_turn(playerTwo);
            display_board(playerTwo);

            // check if gameover condition is met
            if (gameover())
            {
                // Break Loop
                i = 9;
            }
            else
            {
                // Send updated board to other Player
                display_board(playerOne);
            }
        }


    }

    if (!gameover())
    {
        int byteCount = send(playerOne, "3", 200, 0);
        byteCount = send(playerTwo, "3", 200, 0);
        cout << "Draw\n";
    }
    else if (turn)
    {
        // Send winner information to both clients
        int byteCount = send(playerOne, "2", 200, 0);
        byteCount = send(playerTwo, "2", 200, 0);
        cout << "Player 'O' has won\n";
    }
    else if (!turn)
    {
        // Send winner information to both clients
        int byteCount = send(playerTwo, "1", 200, 0);
        byteCount = send(playerOne, "1", 200, 0);
        cout << "Player 'X' has won\n";
    }
        

    // step 7 disconnect
    system("pause");
    closesocket(serverSocket); //close the socket
    WSACleanup(); //terminates the use of winsock
    return 0;
}
